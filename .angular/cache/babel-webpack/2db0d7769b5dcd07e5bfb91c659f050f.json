{"ast":null,"code":"import { Component, Input, NgModule, Renderer2, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nvar QRCode = require('qrcode');\n\nvar NgxQRCodeComponent = function () {\n  /**\n   * @param {?} renderer\n   */\n  function NgxQRCodeComponent(renderer) {\n    this.renderer = renderer;\n    this.elementType = 'url';\n    this.cssClass = 'qrcode';\n    this.value = 'https://www.techiediaries.com';\n    this.version = '';\n    this.errorCorrectionLevel = 'M';\n  }\n  /**\n   * @return {?}\n   */\n\n\n  NgxQRCodeComponent.prototype.ngOnChanges = function () {\n    this.createQRCode();\n  };\n  /**\n   * @return {?}\n   */\n\n\n  NgxQRCodeComponent.prototype.toDataURL = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      QRCode.toDataURL(_this.value, {\n        version: _this.version,\n        errorCorrectionLevel: _this.errorCorrectionLevel\n      }, function (err, url) {\n        if (err) {\n          console.error(err);\n          reject(err);\n        } else {\n          //console.log(url);\n          resolve(url);\n        }\n      });\n    });\n  };\n  /**\n   * @param {?} canvas\n   * @return {?}\n   */\n\n\n  NgxQRCodeComponent.prototype.toCanvas = function (canvas) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      QRCode.toCanvas(canvas, _this.value, {\n        version: _this.version,\n        errorCorrectionLevel: _this.errorCorrectionLevel\n      }, function (error) {\n        if (error) {\n          //console.error(error);\n          reject(error);\n        } else {\n          //console.log('success!');\n          resolve(\"success\");\n        }\n      });\n    });\n  };\n  /**\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  NgxQRCodeComponent.prototype.renderElement = function (element) {\n    for (var _i = 0, _a = this.qrcElement.nativeElement.childNodes; _i < _a.length; _i++) {\n      var node = _a[_i];\n      this.renderer.removeChild(this.qrcElement.nativeElement, node);\n    }\n\n    this.renderer.appendChild(this.qrcElement.nativeElement, element);\n  };\n  /**\n   * @return {?}\n   */\n\n\n  NgxQRCodeComponent.prototype.createQRCode = function () {\n    var _this = this;\n\n    if (!this.value) {\n      return;\n    }\n\n    var\n    /** @type {?} */\n    element; //console.log(\"QR Encoding \" + this.value);\n\n    switch (this.elementType) {\n      case 'canvas':\n        element = this.renderer.createElement('canvas');\n        this.toCanvas(element).then(function (v) {\n          //console.log(v);\n          _this.renderElement(element);\n        }).catch(function (e) {\n          console.error(e);\n        });\n        break;\n\n      case 'url':\n      case 'img':\n      default:\n        element = this.renderer.createElement('img');\n        this.toDataURL().then(function (v) {\n          //console.log(v);\n          element.setAttribute(\"src\", v);\n\n          _this.renderElement(element);\n        }).catch(function (e) {\n          console.error(e);\n        });\n    }\n  };\n\n  return NgxQRCodeComponent;\n}();\n\nNgxQRCodeComponent.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'ngx-qrcode',\n    template: \"<div #qrcElement [class]=\\\"cssClass\\\"></div>\",\n    styles: []\n  }]\n}];\n/**\n * @nocollapse\n */\n\nNgxQRCodeComponent.ctorParameters = function () {\n  return [{\n    type: Renderer2\n  }];\n};\n\nNgxQRCodeComponent.propDecorators = {\n  'elementType': [{\n    type: Input,\n    args: ['qrc-element-type']\n  }],\n  'cssClass': [{\n    type: Input,\n    args: ['qrc-class']\n  }],\n  'value': [{\n    type: Input,\n    args: ['qrc-value']\n  }],\n  'version': [{\n    type: Input,\n    args: ['qrc-version']\n  }],\n  'errorCorrectionLevel': [{\n    type: Input,\n    args: ['qrc-errorCorrectionLevel']\n  }],\n  'qrcElement': [{\n    type: ViewChild,\n    args: ['qrcElement']\n  }]\n};\n\nvar NgxQRCodeModule = function () {\n  function NgxQRCodeModule() {}\n  /**\n   * @return {?}\n   */\n\n\n  NgxQRCodeModule.forRoot = function () {\n    return {\n      ngModule: NgxQRCodeModule,\n      providers: []\n    };\n  };\n\n  return NgxQRCodeModule;\n}();\n\nNgxQRCodeModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule],\n    declarations: [NgxQRCodeComponent],\n    exports: [NgxQRCodeComponent]\n  }]\n}];\n/**\n * @nocollapse\n */\n\nNgxQRCodeModule.ctorParameters = function () {\n  return [];\n};\n\nexport { NgxQRCodeModule, NgxQRCodeComponent };","map":null,"metadata":{},"sourceType":"module"}