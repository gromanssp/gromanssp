{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms'; // import { faCoffee, faMale } from '@fortawesome/free-solid-svg-icons';\n\nlet ComputerComponent = class ComputerComponent {\n  constructor(router, activateRoute, _computadoraService) {\n    this.router = router;\n    this.activateRoute = activateRoute;\n    this._computadoraService = _computadoraService;\n    this.paginas = {\n      pag1: true,\n      pag2: false,\n      pag3: false,\n      pag4: false\n    }; // Animaciones\n\n    this.animationIn = true;\n    this.animationNext = false;\n    this.animationBack = false;\n    this.espera = false;\n    this.memoriaChk = 1;\n    this.repetir = []; // Cargar paginas\n\n    activateRoute.params.subscribe(params => {\n      const paso = params.paso;\n      const id = params.id;\n\n      switch (paso) {\n        case 'paso1':\n          this.datosPaginas(true, false, false, false, false);\n          break;\n\n        case 'paso2':\n          this.datosPaginas(false, true, false, false, false);\n          break;\n\n        case 'paso3':\n          this.datosPaginas(false, false, true, false, false);\n          break;\n\n        case 'paso4':\n          this.datosPaginas(false, false, false, true, false);\n          break;\n\n        default:\n          break;\n      }\n\n      this.paso = paso;\n      this.id = id; // Formulario\n\n      this.forma = new FormGroup({\n        paso1: new FormGroup({\n          nombre: new FormControl(_computadoraService.nombre, [Validators.required, Validators.minLength(3)]),\n          apellidos: new FormControl(_computadoraService.apellidos, [Validators.required, Validators.minLength(3)]),\n          sexo: new FormControl(_computadoraService.genero),\n          inventario: new FormControl(_computadoraService.inventario, [Validators.required, Validators.minLength(3)]),\n          serieSello: new FormControl(_computadoraService.serieSello),\n          serieChasis: new FormControl(_computadoraService.serieSello),\n          marcaChasis: new FormControl(_computadoraService.marcaChasis, [Validators.required, Validators.minLength(2)]),\n          sistema: new FormControl(_computadoraService.sistema)\n        }),\n        paso2: new FormGroup({\n          marcaPlaca: new FormControl(_computadoraService.marcaPlaca, [Validators.required, Validators.minLength(2)]),\n          modeloPlaca: new FormControl(_computadoraService.modeloPlaca, [Validators.required, Validators.minLength(2)]),\n          socket: new FormControl(_computadoraService.socket, Validators.required),\n          microFrecuencia: new FormControl(_computadoraService.microFrecuencia, Validators.required),\n          memoriaNumero: new FormControl(_computadoraService.memoriaNumero, Validators.required),\n          memoriaMarca: new FormControl(_computadoraService.memoriaMarca, Validators.required) // memoriaMarca2: new FormControl(_computadoraService.memoriaMarca2)\n          // memoriaMarca3: new FormControl(_computadoraService.memoriaMarca3)\n          // memoriaMarca4: new FormControl(_computadoraService.memoriaMarca4)\n\n        }),\n        paso3: new FormGroup({\n          marcaFuente: new FormControl('', Validators.required),\n          fuenteSerie: new FormControl('', Validators.required),\n          fuenteCapacidad: new FormControl(null, Validators.required),\n          fuenteMarca: new FormControl('', Validators.required),\n          discoNumero: new FormControl('', Validators.required),\n          discoMarca: new FormControl('', Validators.required)\n        }),\n        paso4: new FormGroup({\n          mouseMarca: new FormControl(''),\n          tecladoMarca: new FormControl(''),\n          tecladoSerie: new FormControl(''),\n          bocinaMarca: new FormControl(''),\n          bocinaSerie: new FormControl('')\n        })\n      });\n    });\n  }\n\n  ngOnInit() {\n    this.cantidades(JSON.stringify(this.memoriaChk));\n  } // Eventos Select\n\n\n  cambioDepartamento(departamento) {\n    localStorage.setItem('departamento', departamento);\n  }\n\n  cambioSO(sistema) {\n    localStorage.setItem('sistema', sistema);\n  }\n\n  cambioMicro(micro) {\n    localStorage.setItem('micro', micro);\n  }\n\n  cambioRAM(ram) {\n    localStorage.setItem('ram', ram);\n  }\n\n  cambioCapacidadRAM(capacidad, ranura) {\n    localStorage.setItem('capacidad' + ranura, capacidad);\n  }\n\n  cambioFrecuenciaRAM(frecuencia, ranura) {\n    localStorage.setItem('frecuencia' + ranura, frecuencia);\n  }\n\n  cambioTipoHD(HD) {\n    console.log(HD);\n  }\n\n  cambioCapacidadHD(capacidad) {\n    console.log(capacidad);\n  }\n\n  cambioCD(cd) {\n    console.log(cd);\n  }\n\n  cambioQuemador(cd) {\n    console.log(cd);\n  }\n\n  cambioMouse(mouse) {\n    console.log(mouse);\n  }\n\n  cambioTeclado(teclado) {\n    console.log(teclado);\n  }\n\n  cambioBocina(bocina) {\n    console.log(bocina);\n  } // cargarComputadora( id: string ) {\n  //     this._computadoraService.cargarComputadoras(id);\n  //   }\n  // Navegacion\n\n\n  datosPaginas(pagina1, pagina2, pagina3, pagina4, espera) {\n    this.paginas.pag1 = pagina1;\n    this.paginas.pag2 = pagina2;\n    this.paginas.pag3 = pagina3;\n    this.paginas.pag4 = pagina4;\n    this.espera = espera; // this.router.navigate(['/computadora', id]);\n  } // navegacion( animationIn: boolean, animationNext: boolean, animationBack: boolean ) {\n  //   this.animationIn = animationIn;\n  //   this.animationNext = animationNext;\n  //   this.animationBack = animationBack;\n  // }\n\n\n  checkPaso2() {\n    if (this.paso !== 'paso2' && this.paso === 'paso3' || this.paso === 'paso4') {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  datosPaso1(animationIn, animationNext, animationBack) {\n    this.animationIn = animationIn;\n    this.animationNext = animationNext;\n    this.animationBack = animationBack;\n\n    if (this.forma.controls.paso1.valid) {\n      this._computadoraService.storagePaso1(this.forma.controls.paso1['controls'].nombre.value, this.forma.controls.paso1['controls'].apellidos.value, this.forma.controls.paso1['controls'].sexo.value, this.forma.controls.paso1['controls'].inventario.value, this.forma.controls.paso1['controls'].serieSello.value, this.forma.controls.paso1['controls'].serieChasis.value, this.forma.controls.paso1['controls'].marcaChasis.value);\n\n      this.router.navigate(['/computadora', 'paso2', this.id]);\n    }\n  }\n\n  cantidades(numero) {\n    const valor = JSON.parse(numero);\n    this.memoriaChk = valor;\n    let arreglo = [1];\n    console.log(arreglo);\n\n    if (valor === 1) {\n      arreglo[0] = 1;\n      return this.repetir = arreglo;\n    }\n\n    if (valor < this.repetir.length) {\n      for (let j = 4; j > valor; j--) {\n        arreglo = this.repetir;\n        arreglo[0] = arreglo.pop();\n        this.repetir = arreglo;\n        console.log(this.repetir);\n      }\n    } else {\n      for (let i = 2; i <= valor; i++) {\n        arreglo[i - 1] = arreglo.push(i);\n        this.repetir[i - 1] = arreglo[i - 1];\n        console.log(this.repetir);\n      }\n    }\n  }\n\n  retroceder(animationIn, animationNext, animationBack) {\n    this.animationIn = animationIn;\n    this.animationNext = animationNext;\n    this.animationBack = animationBack;\n    this.router.navigate(['/computadora', 'paso1', this.id]);\n  }\n\n  datosPaso2(animationIn, animationNext, animationBack) {\n    this.animationIn = animationIn;\n    this.animationNext = animationNext;\n    this.animationBack = animationBack;\n    this.router.navigate(['/computadora', 'paso3', this.id]);\n  } // datosPaso3() {\n  //   this.paginas.pagina3 = false;\n  //   this.paginas.pagina4 = true;\n  //   this.seleccion.step3 = true;\n  //   this.espera = false;\n  //   this.router.navigate(['/computadora', 'paso4']);\n  // }\n\n\n  datosCompletados() {\n    console.log(this.forma.value); // this.router.navigate(['/computadoras']);\n  }\n\n};\nComputerComponent = __decorate([Component({\n  selector: 'app-computer',\n  templateUrl: './computer.component.html',\n  styles: []\n})], ComputerComponent);\nexport { ComputerComponent };","map":null,"metadata":{},"sourceType":"module"}