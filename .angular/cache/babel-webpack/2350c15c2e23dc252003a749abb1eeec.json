{"ast":null,"code":"import Swal from 'sweetalert2';\nimport { URL_SERVICIOS } from 'src/app/config/config'; // import map\n\nimport { catchError, map } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../subir-archivo/subir-archivo.service\";\nexport let UsuarioService = /*#__PURE__*/(() => {\n  class UsuarioService {\n    constructor(http, router, _subirArchivoService) {\n      this.http = http;\n      this.router = router;\n      this._subirArchivoService = _subirArchivoService;\n      this.menu = [];\n      this.cargarStorage();\n    }\n\n    renuevaToken() {\n      let url = URL_SERVICIOS + '/login/renuevatoken';\n      url += '?token=' + this.token;\n      return this.http.get(url).pipe(map(resp => {\n        this.token = resp.token;\n        localStorage.setItem('token', this.token);\n        console.log(' Token Renovado');\n        return true;\n      }), catchError(err => {\n        this.router.navigate(['/login']);\n        Swal.fire('No se pudo renovar token', 'No fue posible renovar el token', 'error');\n        return throwError(err);\n      }));\n    }\n\n    estaLogeado() {\n      return this.token.length > 5 ? true : false;\n    }\n\n    cargarStorage() {\n      if (localStorage.getItem('token')) {\n        this.token = localStorage.getItem('token');\n        this.usuario = JSON.parse(localStorage.getItem('usuario'));\n        this.menu = JSON.parse(localStorage.getItem('menu'));\n      } else {\n        this.token = '';\n        this.usuario = null;\n        this.menu = [];\n      }\n    }\n\n    guardarStorage(id, token, usuario, menu) {\n      localStorage.setItem('id', id);\n      localStorage.setItem('token', token);\n      localStorage.setItem('usuario', JSON.stringify(usuario));\n      localStorage.setItem('menu', JSON.stringify(menu));\n      this.usuario = usuario;\n      this.token = token;\n      this.menu = menu;\n    }\n\n    logout() {\n      this.token = '';\n      this.usuario = null;\n      localStorage.removeItem('token');\n      localStorage.removeItem('usuario');\n      localStorage.removeItem('nombrePropietario');\n      localStorage.removeItem('apellidoPropietario');\n      localStorage.removeItem('genero');\n      localStorage.removeItem('inventario');\n      localStorage.removeItem('serieSello');\n      localStorage.removeItem('serieChasis');\n      localStorage.removeItem('marcaChasis');\n      localStorage.removeItem('sistema');\n      this.router.navigate(['/login']);\n    }\n\n    login(usuario, recordar = false) {\n      if (recordar) {\n        localStorage.setItem('email', usuario.email);\n      } else {\n        localStorage.removeItem('email');\n      }\n\n      const url = URL_SERVICIOS + '/login';\n      return this.http.post(url, usuario).pipe(map(resp => {\n        console.log(resp);\n        this.guardarStorage(resp.id, resp.token, resp.Usuario, resp.menu);\n        return true;\n      }), catchError(err => {\n        Swal.fire('Error en el login', err.error.mensaje, 'error');\n        return throwError(err);\n      }));\n    }\n\n    crearUsuario(usuario) {\n      const url = URL_SERVICIOS + '/usuario';\n      console.log(usuario.nombre);\n      return this.http.post(url, usuario).pipe(map(resp => {\n        Swal.fire('Usuario Creado', usuario.email, 'success');\n        return resp.usuario;\n      }), catchError(err => {\n        Swal.fire(err.error.mensaje, err.error.errors.message, 'error');\n        return throwError(err);\n      }));\n    }\n\n    actualizarUsuario(usuario) {\n      let url = URL_SERVICIOS + '/usuario/' + usuario._id;\n      url += '?token=' + this.token;\n      return this.http.put(url, usuario).pipe(map(resp => {\n        if (usuario._id === this.usuario._id) {\n          const usuarioDB = resp.usuario;\n          this.guardarStorage(usuarioDB._id, this.token, usuarioDB, this.menu);\n        }\n\n        Swal.fire('Usuario actualizado', usuario.nombre, 'success');\n        return true;\n      }), catchError(err => {\n        Swal.fire(err.error.mensaje, err.error.errors.message, 'error');\n        return throwError(err);\n      }));\n    }\n\n    cambiarImagen(archivo, id) {\n      this._subirArchivoService.subirArchivo(archivo, 'usuarios', id).then(resp => {\n        this.usuario.img = resp.usuario.img;\n        Swal.fire('Imagen Actualizada', this.usuario.nombre, 'success');\n        this.guardarStorage(this.usuario, this.token, id, this.menu);\n      }).catch(resp => {\n        console.log(resp);\n      });\n    }\n\n    cargarUsuarios(desde = 0) {\n      const url = URL_SERVICIOS + '/usuario?desde=' + desde;\n      return this.http.get(url);\n    }\n\n    buscarUsuarios(termino) {\n      const url = URL_SERVICIOS + '/busqueda/coleccion/usuarios/' + termino;\n      return this.http.get(url).pipe(map(resp => resp.usuarios));\n    }\n\n    borrarUsuario(id) {\n      const url = URL_SERVICIOS + '/usuario/' + id + '?token=' + this.token;\n      return this.http.delete(url).pipe(map(resp => {\n        Swal.fire('Usuario borrado', 'Usuario borrado correctamente', 'success');\n        return true;\n      }));\n    }\n\n  }\n\n  UsuarioService.ɵfac = function UsuarioService_Factory(t) {\n    return new (t || UsuarioService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.SubirArchivoService));\n  };\n\n  UsuarioService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsuarioService,\n    factory: UsuarioService.ɵfac,\n    providedIn: 'root'\n  });\n  return UsuarioService;\n})();","map":null,"metadata":{},"sourceType":"module"}